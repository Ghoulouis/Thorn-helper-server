{
    "address": "0x1A7d655dB2c2f2caED5E3742a865208e61008493",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_priceToken",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_thorn",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_poolFactory",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                }
            ],
            "name": "OwnableInvalidOwner",
            "type": "error"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "OwnableUnauthorizedAccount",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "avaliableUserRewards",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "pool",
                    "type": "address"
                },
                {
                    "internalType": "address[]",
                    "name": "tokens",
                    "type": "address[]"
                },
                {
                    "internalType": "uint256[]",
                    "name": "amounts",
                    "type": "uint256[]"
                }
            ],
            "name": "checkPoolAndGetTotalUSDT",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "id",
                    "type": "uint256"
                }
            ],
            "name": "claim",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "getAssetValue",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "tokens",
                    "type": "address[]"
                },
                {
                    "internalType": "uint256[]",
                    "name": "amounts",
                    "type": "uint256[]"
                }
            ],
            "name": "getTotalUSD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "user",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "id",
                    "type": "uint256"
                }
            ],
            "name": "getUserInvestment",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "pool",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "startTime",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "endTime",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "tier",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address[]",
                            "name": "tokens",
                            "type": "address[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "amounts",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "address",
                            "name": "lp",
                            "type": "address"
                        }
                    ],
                    "internalType": "struct VaultTestnet.UserInvestment",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "lastTimeUpdate",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "lockedUserRewards",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "numToUser",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "numberUser",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "poolFactory",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "priceToken",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "tier",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "apr",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "locktime",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "minUSDStake",
                    "type": "uint256"
                }
            ],
            "name": "setTier",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "pool",
                    "type": "address"
                },
                {
                    "internalType": "address[]",
                    "name": "tokens",
                    "type": "address[]"
                },
                {
                    "internalType": "uint256[]",
                    "name": "amounts",
                    "type": "uint256[]"
                },
                {
                    "internalType": "uint256",
                    "name": "tier",
                    "type": "uint256"
                }
            ],
            "name": "stake",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "swapUSDtoThorn",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "amountOut",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "thorn",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "tiers",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "apr",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "locktime",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "minUSDStake",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "updateRate",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "id",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "tier",
                    "type": "uint256"
                },
                {
                    "internalType": "address[]",
                    "name": "tokens",
                    "type": "address[]"
                },
                {
                    "internalType": "uint256[]",
                    "name": "amounts",
                    "type": "uint256[]"
                }
            ],
            "name": "upgradeTier",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "userCurrentIds",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "userInvestmentList",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "pool",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "startTime",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "endTime",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "tier",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "lp",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "userLockedTokens",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "userToNum",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "id",
                    "type": "uint256"
                }
            ],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "id",
                    "type": "uint256"
                }
            ],
            "name": "withdrawPrincipal",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "id",
                    "type": "uint256"
                }
            ],
            "name": "withdrawProfit",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0xd85c22e04cfe8c44d11cd95fee8e3e2df348ba8e04381764d1576e49887ee44a",
    "receipt": {
        "to": null,
        "from": "0x48d66a65693dB44d3ca05CBb54e0a806096e2eDA",
        "contractAddress": "0x1A7d655dB2c2f2caED5E3742a865208e61008493",
        "transactionIndex": 1,
        "gasUsed": "2767845",
        "logsBloom": "0x
        "blockHash": "0xa48e8ff2b57689242d3d60cf7e3202daf21df65c7da04ee1bec600c4e571d4a7",
        "transactionHash": "0xd85c22e04cfe8c44d11cd95fee8e3e2df348ba8e04381764d1576e49887ee44a",
        "logs": [
            {
                "transactionIndex": 1,
                "blockNumber": 7276241,
                "transactionHash": "0xd85c22e04cfe8c44d11cd95fee8e3e2df348ba8e04381764d1576e49887ee44a",
                "address": "0x1A7d655dB2c2f2caED5E3742a865208e61008493",
                "topics": ["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x00000000000000000000000048d66a65693db44d3ca05cbb54e0a806096e2eda"],
                "data": "0x",
                "logIndex": 0,
                "blockHash": "0xa48e8ff2b57689242d3d60cf7e3202daf21df65c7da04ee1bec600c4e571d4a7"
            }
        ],
        "blockNumber": 7276241,
        "cumulativeGasUsed": "2789988",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x0b235fDf7aBf810D3B684aa473300dfa5fEbfC1E", "0xf79944113Ace3008b70Cc427820D45F995008f79", "0x17686dC3CebE668Bc1b574162f68D00019dD774a"],
    "numDeployments": 5,
    "solcInputHash": "3fa10063ccf1777a2688158c5a4b19fe",
    "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_thorn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"avaliableUserRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"checkPoolAndGetTotalUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"getTotalUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUserInvestment\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"internalType\":\"struct VaultTestnet.UserInvestment\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedUserRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numToUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUSDStake\",\"type\":\"uint256\"}],\"name\":\"setTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapUSDtoThorn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thorn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUSDStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"upgradeTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCurrentIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInvestmentList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawPrincipal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"checkPoolAndGetTotalUSDT(address,address[],uint256[])\":{\"details\":\"function check uniformity of pool token and list token input and return total USDT value\",\"params\":{\"amounts\":\"list of token amount\",\"pool\":\"pool address\",\"tokens\":\"list of token address\"}},\"getAssetValue(address,uint256)\":{\"details\":\"function help get value of Asset , return USD value\",\"params\":{\"amount\":\"amount of token\",\"token\":\"address of token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/VaultTestnet.sol\":\"VaultTestnet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/vault/VaultTestnet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.24;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IPriceToken.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IStableSwapLP.sol\\\";\\nimport \\\"./interfaces/IPoolFactory.sol\\\";\\n\\ncontract VaultTestnet is Ownable {\\n    struct Tier {\\n        uint256 apr;\\n        uint256 locktime;\\n        uint256 minUSDStake;\\n    }\\n\\n    struct UserInvestment {\\n        address pool;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 tier;\\n        address[] tokens;\\n        uint256[] amounts;\\n        address lp;\\n    }\\n\\n    mapping(address => mapping(uint256 => UserInvestment))\\n        public userInvestmentList;\\n\\n    mapping(address => uint256) public userCurrentIds;\\n\\n    mapping(address => mapping(uint256 => uint256)) public avaliableUserRewards;\\n\\n    mapping(address => mapping(uint256 => uint256)) public lockedUserRewards;\\n\\n    mapping(address => mapping(uint256 => uint256)) public userLockedTokens;\\n\\n    mapping(uint256 => Tier) public tiers;\\n\\n    uint256 public numberUser;\\n    mapping(address => uint256) public userToNum;\\n    mapping(uint256 => address) public numToUser;\\n\\n    address public priceToken;\\n\\n    uint256 public lastTimeUpdate;\\n\\n    address public thorn;\\n\\n    address public poolFactory;\\n\\n    constructor(\\n        address _priceToken,\\n        address _thorn,\\n        address _poolFactory\\n    ) Ownable(msg.sender) {\\n        priceToken = _priceToken;\\n        thorn = _thorn;\\n        poolFactory = _poolFactory;\\n\\n        tiers[0] = Tier({apr: 25, locktime: 60 * 5, minUSDStake: 50 * 1e6});\\n        tiers[1] = Tier({apr: 25, locktime: 60 * 10, minUSDStake: 100 * 1e6});\\n        tiers[2] = Tier({apr: 25, locktime: 60 * 15, minUSDStake: 500 * 1e6});\\n        tiers[3] = Tier({apr: 25, locktime: 60 * 20, minUSDStake: 1000 * 1e6});\\n\\n        lastTimeUpdate = block.timestamp;\\n    }\\n\\n    function stake(\\n        address pool,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256 tier\\n    ) public {\\n        require(tier < 4, \\\"LV: Invalid tier\\\");\\n        // check\\n        uint256 totalUSD = checkPoolAndGetTotalUSDT(pool, tokens, amounts);\\n        require(totalUSD > tiers[tier].minUSDStake, \\\"LV: Min USD stake\\\");\\n        // transfer token to user to vault\\n        for (uint i = 0; i < tokens.length; i++) {\\n            withdrawFromUser(tokens[i], msg.sender, amounts[i]);\\n        }\\n        // create user investment\\n        addToAddressList(msg.sender);\\n        userCurrentIds[msg.sender] += 1;\\n        uint256 id = userCurrentIds[msg.sender];\\n        // transfer token from vault to pool\\n        userLockedTokens[msg.sender][id] = depositVaultToPool(\\n            pool,\\n            tokens,\\n            amounts\\n        );\\n        userInvestmentList[msg.sender][id] = UserInvestment({\\n            pool: pool,\\n            startTime: block.timestamp,\\n            endTime: block.timestamp + tiers[tier].locktime,\\n            tier: tier,\\n            tokens: tokens,\\n            amounts: amounts,\\n            lp: IPool(pool).token()\\n        });\\n\\n        // Send token received to pool\\n    }\\n\\n    function upgradeTier(\\n        uint256 id,\\n        uint256 tier,\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    ) public {\\n        // check\\n        require(\\n            tier > userInvestmentList[msg.sender][id].tier && tier < 5,\\n            \\\"LV: Invalid tier\\\"\\n        );\\n        uint256 totalUSDAdd = checkPoolAndGetTotalUSDT(\\n            userInvestmentList[msg.sender][id].pool,\\n            tokens,\\n            amounts\\n        );\\n\\n        uint totalUSDstaked = getTotalUSD(\\n            userInvestmentList[msg.sender][id].tokens,\\n            userInvestmentList[msg.sender][id].amounts\\n        );\\n\\n        require(\\n            totalUSDstaked + totalUSDAdd > tiers[tier].minUSDStake,\\n            \\\"LV: not enough USD to upgrade\\\"\\n        );\\n\\n        // transfer token to user to vault\\n        for (uint i = 0; i < tokens.length; i++) {\\n            withdrawFromUser(tokens[i], msg.sender, amounts[i]);\\n        }\\n\\n        // transfer token from vault to pool\\n        uint256 lockedToken = depositVaultToPool(\\n            userInvestmentList[msg.sender][id].pool,\\n            userInvestmentList[msg.sender][id].tokens,\\n            amounts\\n        );\\n\\n        userLockedTokens[msg.sender][id] += lockedToken;\\n\\n        uint256[] memory newAmounts = new uint256[](tokens.length);\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            newAmounts[i] =\\n                userInvestmentList[msg.sender][id].amounts[i] +\\n                amounts[i];\\n        }\\n\\n        //upgrade\\n        userInvestmentList[msg.sender][id] = UserInvestment({\\n            pool: userInvestmentList[msg.sender][id].pool,\\n            startTime: block.timestamp,\\n            endTime: block.timestamp + tiers[tier].locktime,\\n            tier: tier,\\n            tokens: tokens,\\n            amounts: newAmounts,\\n            lp: userInvestmentList[msg.sender][id].lp\\n        });\\n    }\\n\\n    function claim(uint256 id) public {\\n        uint256 reward = avaliableUserRewards[msg.sender][id];\\n        avaliableUserRewards[msg.sender][id] = 0;\\n        // transfer reward to user\\n        IERC20(thorn).transfer(msg.sender, reward);\\n    }\\n\\n    function withdraw(uint256 id) public {\\n        uint256 locktime = tiers[userInvestmentList[msg.sender][id].tier]\\n            .locktime;\\n        require(\\n            userInvestmentList[msg.sender][id].startTime + locktime <\\n                block.timestamp,\\n            \\\"LV: Not enough time to withdraw\\\"\\n        );\\n\\n        // withdraw liquidity from pool to vault\\n        uint256 lqWithdraw = userLockedTokens[msg.sender][id];\\n        userLockedTokens[msg.sender][id] = 0;\\n        uint256[] memory receivedTokens = withdrawFromPoolToVault(\\n            userInvestmentList[msg.sender][id].pool,\\n            userInvestmentList[msg.sender][id].tokens,\\n            lqWithdraw\\n        );\\n        // transfer token to user\\n        for (\\n            uint i = 0;\\n            i < userInvestmentList[msg.sender][id].tokens.length;\\n            i++\\n        ) {\\n            IERC20(userInvestmentList[msg.sender][id].tokens[i]).transfer(\\n                msg.sender,\\n                receivedTokens[i]\\n            );\\n        }\\n\\n        // transfer reward to user\\n        uint256 reward = avaliableUserRewards[msg.sender][id] +\\n            lockedUserRewards[msg.sender][id];\\n        avaliableUserRewards[msg.sender][id] = 0;\\n        lockedUserRewards[msg.sender][id] = 0;\\n        IERC20(thorn).transfer(msg.sender, reward);\\n    }\\n\\n    function withdrawPrincipal(uint256 id) public {\\n        uint256 locktime = tiers[userInvestmentList[msg.sender][id].tier]\\n            .locktime;\\n        require(\\n            userInvestmentList[msg.sender][id].startTime + locktime <\\n                block.timestamp,\\n            \\\"LV: Not enough time to withdraw\\\"\\n        );\\n        uint256 lqWithdraw = userLockedTokens[msg.sender][id];\\n        userLockedTokens[msg.sender][id] = 0;\\n        uint256[] memory receivedTokens = withdrawFromPoolToVault(\\n            userInvestmentList[msg.sender][id].pool,\\n            userInvestmentList[msg.sender][id].tokens,\\n            lqWithdraw\\n        );\\n        // transfer token to user\\n        for (\\n            uint i = 0;\\n            i < userInvestmentList[msg.sender][id].tokens.length;\\n            i++\\n        ) {\\n            IERC20(userInvestmentList[msg.sender][id].tokens[i]).transfer(\\n                msg.sender,\\n                receivedTokens[i]\\n            );\\n        }\\n    }\\n\\n    function withdrawProfit(uint256 id) public {\\n        uint256 locktime = tiers[userInvestmentList[msg.sender][id].tier]\\n            .locktime;\\n        require(\\n            userInvestmentList[msg.sender][id].startTime + locktime <\\n                block.timestamp,\\n            \\\"LV: Not enough time to withdraw\\\"\\n        );\\n        // transfer reward to user\\n        uint256 reward = avaliableUserRewards[msg.sender][id] +\\n            lockedUserRewards[msg.sender][id];\\n        avaliableUserRewards[msg.sender][id] = 0;\\n        lockedUserRewards[msg.sender][id] = 0;\\n        IERC20(thorn).transfer(msg.sender, reward);\\n    }\\n\\n    function getUserInvestment(\\n        address user,\\n        uint256 id\\n    ) public view returns (UserInvestment memory) {\\n        UserInvestment memory result = userInvestmentList[user][id];\\n        return result;\\n    }\\n\\n    function updateRate() public {\\n        require(\\n            block.timestamp - lastTimeUpdate > 60,\\n            \\\"LV: Not enough time to update\\\"\\n        );\\n        for (uint i = 1; i < numberUser; i++) {\\n            address user = numToUser[i];\\n            for (uint j = 1; j <= userCurrentIds[user]; j++) {\\n                uint256 locktime = tiers[userInvestmentList[user][j].tier]\\n                    .locktime;\\n\\n                if (\\n                    userInvestmentList[user][j].startTime + locktime >\\n                    block.timestamp\\n                ) {\\n                    uint totalUSD = getTotalUSD(\\n                        userInvestmentList[user][j].tokens,\\n                        userInvestmentList[user][j].amounts\\n                    );\\n\\n                    uint256 rewardUSD = ((totalUSD *\\n                        tiers[userInvestmentList[user][j].tier].apr) /\\n                        100 /\\n                        60 /\\n                        60) * (block.timestamp - lastTimeUpdate);\\n\\n                    uint256 rewardThorn = swapUSDtoThorn(rewardUSD);\\n\\n                    avaliableUserRewards[user][j] += (rewardThorn * 70) / 100;\\n                    lockedUserRewards[user][j] += (rewardThorn * 30) / 100;\\n                }\\n            }\\n        }\\n    }\\n\\n    // HELPER FUNCTIONS\\n\\n    function addToAddressList(address user) internal {\\n        if (userToNum[user] == 0) {\\n            numberUser += 1;\\n            userToNum[user] = numberUser;\\n            numToUser[numberUser] = user;\\n        }\\n    }\\n\\n    function withdrawFromUser(\\n        address token,\\n        address sender,\\n        uint256 amount\\n    ) internal {\\n        IERC20(token).transferFrom(sender, address(this), amount);\\n    }\\n\\n    function depositVaultToPool(\\n        address pool,\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    ) internal returns (uint256) {\\n        address LP = IPool(pool).token();\\n        uint256 before_balance = IStableSwapLP(LP).balanceOf(address(this));\\n        uint256 N_COINS = IPool(pool).N_COINS();\\n        require(N_COINS == amounts.length, \\\"Invalid number of Amounts\\\");\\n        if (N_COINS == 2) {\\n            uint256[2] memory fixedAmounts;\\n            for (uint256 i = 0; i < 2; i++) {\\n                fixedAmounts[i] = amounts[i];\\n                IERC20(tokens[i]).approve(pool, amounts[i]);\\n            }\\n            IPool(pool).add_liquidity(fixedAmounts, uint256(0));\\n        } else {\\n            uint256[3] memory fixedAmounts;\\n            for (uint256 i = 0; i < 3; i++) {\\n                fixedAmounts[i] = amounts[i];\\n                IERC20(tokens[i]).approve(pool, amounts[i]);\\n            }\\n            IPool(pool).add_liquidity(fixedAmounts, uint256(0));\\n        }\\n        uint256 after_balance = IStableSwapLP(LP).balanceOf(address(this));\\n        return after_balance - before_balance;\\n    }\\n\\n    function withdrawFromPoolToVault(\\n        address pool,\\n        address[] memory tokens,\\n        uint256 amount\\n    ) internal returns (uint256[] memory tokenAmounts) {\\n        // get coins number of pool\\n        uint256 N_COINS = IPool(pool).N_COINS();\\n\\n        tokenAmounts = new uint256[](N_COINS);\\n        uint256[] memory before_balances = new uint256[](10);\\n        uint256[] memory after_balances = new uint256[](10);\\n\\n        // get token balances of Vault\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            before_balances[i] = IERC20(tokens[i]).balanceOf(address(this));\\n        }\\n\\n        if (N_COINS == 2) {\\n            IPool(pool).remove_liquidity(amount, [uint256(0), uint256(0)]);\\n        } else {\\n            IPool(pool).remove_liquidity(\\n                amount,\\n                [uint256(0), uint256(0), uint256(0)]\\n            );\\n        }\\n\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            after_balances[i] = IERC20(tokens[i]).balanceOf(address(this));\\n            // calculate the token quantities of the sender\\n            tokenAmounts[i] = after_balances[i] - before_balances[i];\\n        }\\n        return tokenAmounts;\\n    }\\n\\n    /**\\n     * @dev function help get value of Asset , return USD value\\n     * @param token address of token\\n     * @param amount amount of token\\n     */\\n    function getAssetValue(\\n        address token,\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        return IPriceToken(priceToken).getAssetValue(token, amount);\\n    }\\n\\n    /**\\n     * @dev function check uniformity of pool token and list token input and return total USDT value\\n     * @param pool pool address\\n     * @param tokens list of token address\\n     * @param amounts list of token amount\\n     */\\n    function checkPoolAndGetTotalUSDT(\\n        address pool,\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    ) public view returns (uint256) {\\n        uint256 N_COINS = IPool(pool).N_COINS();\\n\\n        require(N_COINS == tokens.length, \\\"Invalid number of tokens\\\");\\n        if (N_COINS == 2) {\\n            IPoolFactory.StableSwapPairInfo memory info = IPoolFactory(\\n                poolFactory\\n            ).getPairInfo(tokens[0], tokens[1]);\\n            require(pool == info.swapContract, \\\"Invalid Pool\\\");\\n        } else {\\n            IPoolFactory.StableSwapThreePoolPairInfo memory info = IPoolFactory(\\n                poolFactory\\n            ).getThreePoolPairInfo(tokens[0], tokens[1]);\\n            require(pool == info.swapContract, \\\"Invalid Pool\\\");\\n        }\\n        return getTotalUSD(tokens, amounts);\\n    }\\n\\n    function getTotalUSD(\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    ) public view returns (uint256) {\\n        uint256 totalUSD = 0;\\n        for (uint i = 0; i < tokens.length; i++) {\\n            totalUSD += getAssetValue(tokens[i], amounts[i]);\\n        }\\n        return totalUSD;\\n    }\\n\\n    function swapUSDtoThorn(\\n        uint256 amount\\n    ) public view returns (uint256 amountOut) {\\n        return IPriceToken(priceToken).USDtoThorn(amount);\\n    }\\n\\n    //region ADMIN FUNCTIONS\\n\\n    function setTier(\\n        uint256 tier,\\n        uint256 apr,\\n        uint256 locktime,\\n        uint256 minUSDStake\\n    ) public onlyOwner {\\n        tiers[tier] = Tier({\\n            apr: apr,\\n            locktime: locktime,\\n            minUSDStake: minUSDStake\\n        });\\n    }\\n}\\n\",\"keccak256\":\"0xd35b13c0eb202b6583e28c48d162e07e539fae125dcab6c3e697f99086680c83\",\"license\":\"GPL-2.0-or-later\"},\"contracts/vault/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.24;\\n\\ninterface IPool {\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    function add_liquidity(\\n        uint256[3] memory amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    function N_COINS() external view returns (uint256);\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[2] memory min_amounts\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[3] memory min_amounts\\n    ) external;\\n\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x88db6d270922e4756d8a73ed67d81b3b4d8c1337e6ef3b58c9ae1b912771ebd6\",\"license\":\"GPL-2.0-or-later\"},\"contracts/vault/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.24;\\n\\ninterface IPoolFactory {\\n    struct StableSwapPairInfo {\\n        address swapContract;\\n        address token0;\\n        address token1;\\n        address LPContract;\\n    }\\n\\n    struct StableSwapThreePoolPairInfo {\\n        address swapContract;\\n        address token0;\\n        address token1;\\n        address token2;\\n        address LPContract;\\n    }\\n\\n    function getPairInfo(\\n        address _tokenA,\\n        address _tokenB\\n    ) external view returns (StableSwapPairInfo memory info);\\n\\n    function getThreePoolPairInfo(\\n        address _tokenA,\\n        address _tokenB\\n    ) external view returns (StableSwapThreePoolPairInfo memory info);\\n}\\n\",\"keccak256\":\"0xe442292492d4dd85299dd0d9ef9a610f587f7b5d7b47f4295d6affb17b3d4e3f\",\"license\":\"MIT\"},\"contracts/vault/interfaces/IPriceToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.24;\\n\\ninterface IPriceToken {\\n    //storage\\n    function getAssetValue(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256 amountOut);\\n\\n    function getAssetPrice(\\n        address token\\n    ) external view returns (uint256 amountOut);\\n\\n    function USDtoThorn(\\n        uint256 amount\\n    ) external view returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x73eaa7014a34a26f7e2ed78bd15764abe34074bb0143637f13a4f11a097565fb\",\"license\":\"GPL-2.0-or-later\"},\"contracts/vault/interfaces/IStableSwapLP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.24;\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IStableSwapLP is IERC20 {}\\n\",\"keccak256\":\"0xb9659cd72e329cf97d1222cf73cdc03ad89585ec2f66330b57e95d594fc49500\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
    "bytecode": "0x608034620001fd57601f62002c2b38819003918201601f191683019291906001600160401b0384118385101762000202578160609284926040968752833981010312620001fd57620000518162000238565b6020906200006e846200006684860162000238565b940162000238565b923315620001e557600080546001600160a01b031980821633908117845592966002969591946001600160a01b039491938593919284929183167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08c80a31685600a541617600a551683600c541617600c551690600d541617600d55620000f462000218565b601981528282820161012c8152868301906302faf08082528680526006855287872093518455516001840155519101556200012e62000218565b60198152828282016102588152868301906305f5e1008252600187526006855287872093518455516001840155519101556200016962000218565b6019815282828201610384815286830190631dcd65008252828752600685528787209351845551600184015551910155620001a362000218565b926019845284828501916104b08352600682870194633b9aca008652600383525220935184555160018401555191015542600b55516129dd90816200024e8239f35b8451631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b60405190606082016001600160401b038111838210176200020257604052565b51906001600160a01b0382168203620001fd5756fe608080604052600436101561001357600080fd5b60003560e01c908163035ac814146118cc57508063039af9eb146118895780632dcdbfd3146118275780632e1a7d4d146115c95780632fccf0fc146115a25780632ff6fe761461157b57806332f25827146113ee578063379607f5146113675780634219dc40146113405780634d9b45c8146112f857806351882b751461127d57806351a93b661461125f5780635fa51cf714611200578063658e28a41461104b578063715018a614610ff257806378cf4be514610fd45780637a299d4f14610f8c57806388d5256d14610f335780638da5cb5b14610f0c5780638df12a8114610ec4578063abef727f14610b09578063afa2344614610ae2578063c7fee63e1461088f578063ccd201b114610855578063d82a2bea14610706578063e6bc89c0146106d1578063f2fde38b1461064a578063f81a71c0146106105763fa92b68d1461015e57600080fd5b3461060b57608036600319011261060b5760443567ffffffffffffffff811161060b5761018f9036906004016119a0565b60643567ffffffffffffffff811161060b576101af903690600401611a10565b90336000526001602052604060002060043560005260205260036040600020015460243511806105ff575b6101e39061208d565b336000526001602052604060002060043560005260205261027461021683836001600160a01b0360406000205416611cc3565b336000526001602052604060002060043560005260205261026f60046040600020013360005260016020526040600020600435600052602052610269610263600560406000200192611ac9565b91611c12565b9061203b565b611a70565b602435600052600660205260026040600020015410156105ba5760005b81518110156102cd57806102c76001600160a01b036102b260019486611b70565b51166102be8387611b70565b51903390612510565b01610291565b503360005260016020526040600020600435600052602052610325826001600160a01b0360406000205416336000526001602052604060002060043560005260205261031f6004604060002001611ac9565b9061256f565b336000526005602052604060002060043560005260205261034c6040600020918254611a70565b9055610358815161212f565b9160005b82518110156103bb57600190336000528160205260406000206004356000526020526103aa610392826005604060002001611b25565b90549060031b1c6103a38386611b70565b5190611a70565b6103b48287611b70565b520161035c565b505033600052600160205260406000206004356000526020526001600160a01b036040600020541691602435600052600660205261040160016040600020015442611a70565b9133600052600160205260406000206004356000526020526001600160a01b0360066040600020015416926040519461043986611919565b855242602086015260408501526024356060850152608084015260a083015260c0820152336000526001602052604060002060043560005260205260406000206001600160a01b03825116906001600160a01b031991828254161781556020830151600182015560408301516002820155606083015160038201556004810160808401519081519067ffffffffffffffff8211610587576801000000000000000092838311610587576020906104f4848454818655856120ec565b0190600052602060002060005b83811061059d57505050506005820160a085015180519267ffffffffffffffff84116105875783116105875760209061053f848454818655856120ec565b0190600052602060002060005b8381106105735786866001600160a01b0360c0600689019301511690825416179055600080f35b60019060208451940193818401550161054c565b634e487b7160e01b600052604160045260246000fd5b60019060206001600160a01b038551169401938184015501610501565b60405162461bcd60e51b815260206004820152601d60248201527f4c563a206e6f7420656e6f7567682055534420746f20757067726164650000006044820152606490fd5b506005602435106101da565b600080fd5b3461060b57602036600319011261060b576001600160a01b036106316118e7565b1660005260026020526020604060002054604051908152f35b3461060b57602036600319011261060b576106636118e7565b61066b612161565b6001600160a01b038091169081156106b857600054826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b3461060b57602036600319011261060b57600435600052600960205260206001600160a01b0360406000205416604051908152f35b3461060b5760208060031936011261060b5760008161081160043533845260018352604084208185528352600360408520015484526006835261077161076a6001604087200154338752600186526040872084885286526001604088200154611a70565b4211611a7d565b338452600383526040842081855283526107a4604085205433865260048552604086208387528552604086205490611a70565b9033855260038452604085208186528452846040812055338552600484526040852090855283528360408120556001600160a01b03600c54169060405194858094819363a9059cbb60e01b83523360048401602090939291936001600160a01b0360408201951681520152565b03925af180156108495761082157005b8161084092903d10610842575b6108388183611966565b810190611b84565b005b503d61082e565b6040513d6000823e3d90fd5b3461060b57602036600319011261060b576001600160a01b036108766118e7565b1660005260086020526020604060002054604051908152f35b3461060b57600036600319011261060b57603c600b90603c6108b3600b5442612122565b1115610a9d576001915b6007548310156108405782600052602090600982526001600160a01b03604060002054169160015b83600052600282526040600020548111610a8f57600182526040600020816000528252600380604060002001546000526006808452866001604060002001548760005260018652604060002085600052865261094a4291600160406000200154611a70565b1161097a575b5050506000198114610964576001016108e5565b634e487b7160e01b600052601160045260246000fd5b610a1181610a16926109fd948a6000526001895260406000208860005289526109cb60046040600020018c60005260018b5260406000208a6000528b52610269610263600560406000200192611ac9565b908b60005260018a526040600020896000528a52876040600020015460005289526064958691604060002054906120d9565b040404610a0b885442612122565b906120d9565b612000565b916046908184029084159285830414831715610964578860005286526040600020856000528652610a4f83604060002092048254611a70565b9055601e80840293840414171561096457610a859086600052600485526040600020846000528552604060002092048254611a70565b9055868086610950565b5050926001915001916108bd565b60405162461bcd60e51b815260206004820152601d60248201527f4c563a204e6f7420656e6f7567682074696d6520746f207570646174650000006044820152606490fd5b3461060b57600036600319011261060b5760206001600160a01b03600c5416604051908152f35b3461060b57608036600319011261060b57610b226118e7565b60243567ffffffffffffffff811161060b57610b429036906004016119a0565b60443567ffffffffffffffff811161060b57610b62903690600401611a10565b90610b7160046064351061208d565b610b7c828285611cc3565b60643560005260066020526002604060002001541015610e7f5760005b8151811015610bc05780610bba6001600160a01b036102b260019486611b70565b01610b99565b5033600052600860205260406000205415610e3b575b336000526002602052604060002080549060018201809211610964575533600052600260205260406000205491610c0e81838661256f565b3360005260056020526040600020846000526020526040600020556064356000526006602052610c4660016040600020015442611a70565b9060405192637e062a3560e11b84526020846004816001600160a01b038a165afa92831561084957600093610df9575b6001600160a01b0380955060405197610c8e89611919565b16875242602088015260408701526064356060870152608086015260a08501521660c083015233600052600160205260406000209060005260205260406000206001600160a01b03825116906001600160a01b031991828254161781556020830151600182015560408301516002820155606083015160038201556004810160808401519081519067ffffffffffffffff821161058757680100000000000000009283831161058757602090610d49848454818655856120ec565b0190600052602060002060005b838110610ddc57505050506005820160a085015180519267ffffffffffffffff841161058757831161058757602090610d94848454818655856120ec565b0190600052602060002060005b838110610dc85786866001600160a01b0360c0600689019301511690825416179055600080f35b600190602084519401938184015501610da1565b60019060206001600160a01b038551169401938184015501610d56565b92506020843d602011610e33575b81610e1460209383611966565b8101031261060b57610e2d6001600160a01b0394611c63565b92610c76565b3d9150610e07565b6007546001810180911161096457806007553360005260086020528060406000205560005260096020526040600020336001600160a01b0319825416179055610bd6565b60405162461bcd60e51b815260206004820152601160248201527f4c563a204d696e20555344207374616b650000000000000000000000000000006044820152606490fd5b3461060b57604036600319011261060b576001600160a01b03610ee56118e7565b16600052600460205260406000206024356000526020526020604060002054604051908152f35b3461060b57600036600319011261060b5760206001600160a01b0360005416604051908152f35b3461060b57604036600319011261060b5767ffffffffffffffff60043581811161060b57610f659036906004016119a0565b9060243590811161060b57602091610269610f84923690600401611a10565b604051908152f35b3461060b57604036600319011261060b576001600160a01b03610fad6118e7565b16600052600560205260406000206024356000526020526020604060002054604051908152f35b3461060b57602036600319011261060b576020610f84600435612000565b3461060b57600036600319011261060b5761100b612161565b60006001600160a01b0381546001600160a01b031981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461060b5760208060031936011261060b576004353360005260019182918282526040600020816000528252600390600360406000200154600052600683526110b761076a85604060002001543360005286865260406000208460005286528660406000200154611a70565b3360005260058352604060002081600052835260406000205433600052600584526040600020826000528452600060408120553360005284845260406000208260005284526111386001600160a01b039182604060002054163360005287875260406000208560005287526111326004604060002001611ac9565b906121dd565b6000955b61114257005b33600052868552604060002083600052855260046040600020015486101561084057600095338752878652604087208488528652856111c78461118b84600460408d2001611b25565b905490891b1c1661119c8486611b70565b5160405163a9059cbb60e01b81523360048201526024810191909152998a9283919082906044820190565b03925af190811561084957889788926111e3575b50019561113c565b6111f990883d8a11610842576108388183611966565b50896111db565b3461060b57606036600319011261060b576112196118e7565b67ffffffffffffffff60243581811161060b5761123a9036906004016119a0565b9160443591821161060b57602092611259610f84933690600401611a10565b91611cc3565b3461060b57600036600319011261060b576020600754604051908152f35b3461060b57604036600319011261060b5760a06112986118e7565b6001600160a01b038091166000526001602052604060002060243560005260205260406000209080825416916001810154916002820154906006600384015493015416926040519485526020850152604084015260608301526080820152f35b3461060b57604036600319011261060b576001600160a01b036113196118e7565b16600052600360205260406000206024356000526020526020604060002054604051908152f35b3461060b57600036600319011261060b5760206001600160a01b03600d5416604051908152f35b3461060b5760208060031936011261060b5760008161081160043533845260038352604084208185528352604084205490338552600384526040852090855283528360408120556001600160a01b03600c54169060405194858094819363a9059cbb60e01b83523360048401602090939291936001600160a01b0360408201951681520152565b3461060b57604036600319011261060b576114076118e7565b60405161141381611919565b60008152600060c0602092828482015282604082015282606082015260606080820152606060a082015201526001600160a01b0380921660005260019160018252604060002060243560005282526040600020906040519161147483611919565b818154168352600181015493808401948552600282015491604085019283526003810154606086019081526114ab60048301611ac9565b90608087019182528560066114c260058601611c12565b9460a08a019586520154169460c0880195865260405198858a52876101008b01995116868b01525160408a0152516060890152516080880152519460e060a0880152855180915282610120880196019060005b8982821061156757505050505193601f198682030160c087015281808651928381520195019160005b828110611554578451861660e089015287870388f35b835187529581019592810192880161153e565b835188168952978501979285019201611515565b3461060b57600036600319011261060b5760206001600160a01b03600a5416604051908152f35b3461060b57604036600319011261060b576020610f846115c06118e7565b60243590611b9c565b3461060b5760208060031936011261060b578060043533600052600180835260406000208260005283526003906003604060002001546000526006845261163361076a82604060002001543360005283875260406000208660005287528360406000200154611a70565b336000526005845260406000208360005284526040600020549133600052600585526040600020846000528552600060408120553360005281855260406000208460005285526116af6001600160a01b039384604060002054163360005284885260406000208760005288526111326004604060002001611ac9565b906000835b61175d575b505050506000929161081191338552600384526040852082865284526116f8604086205433875260048652604087208488528652604087205490611a70565b913386526003855260408620818752855285604081205533865260048552604086209086528452846040812055600c54169060405194858094819363a9059cbb60e01b83523360048401602090939291936001600160a01b0360408201951681520152565b3360005283875260406000208660005287526004604060002001548110156118225760009394959650338452848852604084208785528852876117e6876117aa84600460408a2001611b25565b905490861b1c166117bb8487611b70565b5160405163a9059cbb60e01b8152336004820152602481019190915296879283919082906044820190565b03925af19081156108495785948592611805575b5001879695946116b4565b61181b908a3d8c11610842576108388183611966565b50896117fa565b6116b9565b3461060b57608036600319011261060b57611840612161565b60405161184c816118fd565b6024358152600260208201604435815260408301906064358252600435600052600660205260406000209351845551600184015551910155600080f35b3461060b57602036600319011261060b57600435600052600660205260606040600020805490600260018201549101549060405192835260208301526040820152f35b3461060b57600036600319011261060b57602090600b548152f35b600435906001600160a01b038216820361060b57565b6060810190811067ffffffffffffffff82111761058757604052565b60e0810190811067ffffffffffffffff82111761058757604052565b67ffffffffffffffff811161058757604052565b610160810190811067ffffffffffffffff82111761058757604052565b90601f8019910116810190811067ffffffffffffffff82111761058757604052565b67ffffffffffffffff81116105875760051b60200190565b9080601f8301121561060b5760209082356119ba81611988565b936119c86040519586611966565b81855260208086019260051b82010192831161060b57602001905b8282106119f1575050505090565b81356001600160a01b038116810361060b5781529083019083016119e3565b9080601f8301121561060b576020908235611a2a81611988565b93611a386040519586611966565b81855260208086019260051b82010192831161060b57602001905b828210611a61575050505090565b81358152908301908301611a53565b9190820180921161096457565b15611a8457565b60405162461bcd60e51b815260206004820152601f60248201527f4c563a204e6f7420656e6f7567682074696d6520746f207769746864726177006044820152606490fd5b90604051918281549182825260209260208301916000526020600020936000905b828210611b0257505050611b0092500383611966565b565b85546001600160a01b031684526001958601958895509381019390910190611aea565b8054821015611b3d5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b805115611b3d5760200190565b805160011015611b3d5760400190565b8051821015611b3d5760209160051b010190565b9081602091031261060b5751801515810361060b5790565b600a54604051630bf33c3f60e21b81526001600160a01b039283166004820152602481019390935260209183916044918391165afa90811561084957600091611be3575090565b90506020813d602011611c0a575b81611bfe60209383611966565b8101031261060b575190565b3d9150611bf1565b90604051918281549182825260209260208301916000526020600020936000905b828210611c4957505050611b0092500383611966565b855484526001958601958895509381019390910190611c33565b51906001600160a01b038216820361060b57565b15611c7e57565b60405162461bcd60e51b815260206004820152600c60248201527f496e76616c696420506f6f6c00000000000000000000000000000000000000006044820152606490fd5b9291906001600160a01b03809416604094855195630293577560e41b875260209060049782818a81885afa908115611ff557600091611fc8575b5085518103611f8557600203611e5657611d6790608084600d541685611d2289611b53565b51169086611d2f8a611b60565b5116918c855196879485938493632007bd0f60e11b855284019060209093929360408301946001600160a01b03809216845216910152565b03915afa928315611e4b57600093611d99575b505050611d9695965090611d919291511614611c77565b61203b565b90565b6080833d608011611e43575b81611db260809383611966565b81010312611e3f57815193608085019085821067ffffffffffffffff831117611e2c5750611d96999a509282606092611d9198979695611e1c9552611df683611c63565b8652611e03818401611c63565b90860152611e12818301611c63565b9085015201611c63565b6060820152909192879638611d7a565b634e487b7160e01b815260418c52602490fd5b8380fd5b3d9150611da5565b50513d6000823e3d90fd5b611eb09060a084600d541685611e6b89611b53565b51169086611e788a611b60565b5116918c85519687948593849363923093cb60e01b855284019060209093929360408301946001600160a01b03809216845216910152565b03915afa928315611e4b57600093611ed957505050611d9695965090611d919291511614611c77565b60a0833d60a011611f7d575b81611ef260a09383611966565b81010312611e3f5781519360a085019085821067ffffffffffffffff831117611e2c5750611d96999a509282608092611d9198979695611f6d9552611f3683611c63565b8652611f43818401611c63565b90860152611f52818301611c63565b90850152611f6260608201611c63565b606085015201611c63565b6080820152909192879638611d7a565b3d9150611ee5565b815162461bcd60e51b8152808a01849052601860248201527f496e76616c6964206e756d626572206f6620746f6b656e7300000000000000006044820152606490fd5b90508281813d8311611fee575b611fdf8183611966565b8101031261060b575138611cfd565b503d611fd5565b82513d6000823e3d90fd5b60206001600160a01b03600a54169160246040518094819363210fc36760e11b835260048301525afa90811561084957600091611be3575090565b60009190825b81518410156120865761207e6001916120786001600160a01b036120658887611b70565b51166120718888611b70565b5190611b9c565b90611a70565b930192612041565b9250505090565b1561209457565b60405162461bcd60e51b815260206004820152601060248201527f4c563a20496e76616c69642074696572000000000000000000000000000000006044820152606490fd5b8181029291811591840414171561096457565b90918281106120fa57505050565b600091600052602060002092830192015b82811061211757505050565b81815560010161210b565b9190820391821161096457565b9061213982611988565b6121466040519182611966565b8281528092612157601f1991611988565b0190602036910137565b6001600160a01b0360005416330361217557565b60405163118cdaa760e01b8152336004820152602490fd5b6000915b6003831061219e57505050565b600190825181526020809101920192019190612191565b6000915b600283106121c657505050565b6001908251815260208091019201920191906121b9565b9190916001600160a01b03809116604092835192630293577560e41b8452600060209060049282878581895afa9687156125065782976124d3575b506122228761212f565b9888519661222f88611949565b600a8852610140968736878b01378a519761224989611949565b600a895236878a0137845b8a8110612449575060028a036123da578a51918b830183811067ffffffffffffffff8211176123c5578c528583528587840152803b156123c157906064888780948f6122b7905197889687956316cd8e2760e21b875286015260248501906121b5565b5af180156123b75790849161239f575b50505b825b8881106122e0575050505050505050505090565b602485846122ee8486611b70565b51168c51928380926370a0823160e01b8252308c8301525afa90811561239557888a93928e92889161235b575b5061234e600195612347866123408187819761233a836123549b611b70565b52611b70565b5192611b70565b5190612122565b92611b70565b52016122cc565b94505050508582813d831161238e575b6123758183611966565b8101031261060b5790518891908c90899061234e61231b565b503d61236b565b8b513d87823e3d90fd5b6123a890611935565b6123b35782386122c7565b8280fd5b8a513d86823e3d90fd5b8580fd5b604189634e487b7160e01b6000525260246000fd5b8a51916123e6836118fd565b8583528587840152858c840152803b156123c157906084888780948f6124239051978896879563ecb586a560e01b8752860152602485019061218d565b5af180156123b757612436575b506122ca565b61244290939193611935565b9138612430565b80878d8761245960249589611b70565b51169051938480926370a0823160e01b82528d30908301525afa80156124c9578790612495575b6001925061248e828d611b70565b5201612254565b50908781813d83116124c2575b6124ac8183611966565b810103126124be579060019151612480565b8680fd5b503d6124a2565b8d513d89823e3d90fd5b9096508281813d83116124ff575b6124eb8183611966565b810103126124fb57519538612218565b5080fd5b503d6124e1565b88513d84823e3d90fd5b606460209260006001600160a01b03809460405197889687956323b872dd60e01b87521660048601523060248601526044850152165af18015610849576125545750565b61256c9060203d602011610842576108388183611966565b50565b90916001600160a01b0392838316604092835190637e062a3560e11b825260009260209460049386818681865afa9081156129c657908a91879161298e575b5016988993885199888b6024816370a0823160e01b998a8252308c8301525afa9a8b1561298457889b612951575b508951630293577560e41b81529289848981895afa938415612947578994612914575b50825184036128d15760029384036127d8578a51948b860186811067ffffffffffffffff8211176127c3578c528b36873789808c8e5b8c89851061271b5750505050505050505050813b156127175761267060648692838a519586948593630b4c7e4d60e01b85528a8501906121b5565b8160448401525af1801561270d578593929185916126f2575b50506024905b86519889938492835230908301525afa9283156126e85750916126b8575b50611d969250612122565b905082813d83116126e1575b6126ce8183611966565b8101031261060b57611d969151386126ad565b503d6126c4565b51903d90823e3d90fd5b6126ff9192939450611935565b6123b3579083918338612689565b86513d86823e3d90fd5b8480fd5b8761277b9461272a878c611b70565b518d8860051b01528861273d888a611b70565b51169261274a888d611b70565b5194519687958694859363095ea7b360e01b85528401602090939291936001600160a01b0360408201951681520152565b03925af180156127b957600192918e9161279b575b5050018a8c8e612635565b816127b192903d10610842576108388183611966565b508c38612790565b8e513d8e823e3d90fd5b60418a634e487b7160e01b6000525260246000fd5b8a519493506127e6856118fd565b6060368637885b898b8d8b6003851061286057505050505050505050813b156127175761282b60848692838a519586948593634515cef360e01b85528a85019061218d565b8160648401525af1801561270d57908593929161284c575b5060249061268f565b9361285960249295611935565b9390612843565b8661288f9461286f878b611b70565b518760051b8d015287612882888d611b70565b51169261274a888c611b70565b03925af180156128c75790600192916128aa575b50016127ed565b6128c0908d803d10610842576108388183611966565b50386128a3565b8d513d8d823e3d90fd5b8a5162461bcd60e51b81528089018b9052601960248201527f496e76616c6964206e756d626572206f6620416d6f756e7473000000000000006044820152606490fd5b9093508981813d8311612940575b61292c8183611966565b8101031261293c575192386125ff565b8880fd5b503d612922565b8b513d8b823e3d90fd5b909a508881813d831161297d575b6129698183611966565b81010312612979575199386125dc565b8780fd5b503d61295f565b8a513d8a823e3d90fd5b809250888092503d83116129bf575b6129a78183611966565b810103126123c1576129b98a91611c63565b386125ae565b503d61299d565b88513d88823e3d90fdfea164736f6c6343000818000a",
    "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c908163035ac814146118cc57508063039af9eb146118895780632dcdbfd3146118275780632e1a7d4d146115c95780632fccf0fc146115a25780632ff6fe761461157b57806332f25827146113ee578063379607f5146113675780634219dc40146113405780634d9b45c8146112f857806351882b751461127d57806351a93b661461125f5780635fa51cf714611200578063658e28a41461104b578063715018a614610ff257806378cf4be514610fd45780637a299d4f14610f8c57806388d5256d14610f335780638da5cb5b14610f0c5780638df12a8114610ec4578063abef727f14610b09578063afa2344614610ae2578063c7fee63e1461088f578063ccd201b114610855578063d82a2bea14610706578063e6bc89c0146106d1578063f2fde38b1461064a578063f81a71c0146106105763fa92b68d1461015e57600080fd5b3461060b57608036600319011261060b5760443567ffffffffffffffff811161060b5761018f9036906004016119a0565b60643567ffffffffffffffff811161060b576101af903690600401611a10565b90336000526001602052604060002060043560005260205260036040600020015460243511806105ff575b6101e39061208d565b336000526001602052604060002060043560005260205261027461021683836001600160a01b0360406000205416611cc3565b336000526001602052604060002060043560005260205261026f60046040600020013360005260016020526040600020600435600052602052610269610263600560406000200192611ac9565b91611c12565b9061203b565b611a70565b602435600052600660205260026040600020015410156105ba5760005b81518110156102cd57806102c76001600160a01b036102b260019486611b70565b51166102be8387611b70565b51903390612510565b01610291565b503360005260016020526040600020600435600052602052610325826001600160a01b0360406000205416336000526001602052604060002060043560005260205261031f6004604060002001611ac9565b9061256f565b336000526005602052604060002060043560005260205261034c6040600020918254611a70565b9055610358815161212f565b9160005b82518110156103bb57600190336000528160205260406000206004356000526020526103aa610392826005604060002001611b25565b90549060031b1c6103a38386611b70565b5190611a70565b6103b48287611b70565b520161035c565b505033600052600160205260406000206004356000526020526001600160a01b036040600020541691602435600052600660205261040160016040600020015442611a70565b9133600052600160205260406000206004356000526020526001600160a01b0360066040600020015416926040519461043986611919565b855242602086015260408501526024356060850152608084015260a083015260c0820152336000526001602052604060002060043560005260205260406000206001600160a01b03825116906001600160a01b031991828254161781556020830151600182015560408301516002820155606083015160038201556004810160808401519081519067ffffffffffffffff8211610587576801000000000000000092838311610587576020906104f4848454818655856120ec565b0190600052602060002060005b83811061059d57505050506005820160a085015180519267ffffffffffffffff84116105875783116105875760209061053f848454818655856120ec565b0190600052602060002060005b8381106105735786866001600160a01b0360c0600689019301511690825416179055600080f35b60019060208451940193818401550161054c565b634e487b7160e01b600052604160045260246000fd5b60019060206001600160a01b038551169401938184015501610501565b60405162461bcd60e51b815260206004820152601d60248201527f4c563a206e6f7420656e6f7567682055534420746f20757067726164650000006044820152606490fd5b506005602435106101da565b600080fd5b3461060b57602036600319011261060b576001600160a01b036106316118e7565b1660005260026020526020604060002054604051908152f35b3461060b57602036600319011261060b576106636118e7565b61066b612161565b6001600160a01b038091169081156106b857600054826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b3461060b57602036600319011261060b57600435600052600960205260206001600160a01b0360406000205416604051908152f35b3461060b5760208060031936011261060b5760008161081160043533845260018352604084208185528352600360408520015484526006835261077161076a6001604087200154338752600186526040872084885286526001604088200154611a70565b4211611a7d565b338452600383526040842081855283526107a4604085205433865260048552604086208387528552604086205490611a70565b9033855260038452604085208186528452846040812055338552600484526040852090855283528360408120556001600160a01b03600c54169060405194858094819363a9059cbb60e01b83523360048401602090939291936001600160a01b0360408201951681520152565b03925af180156108495761082157005b8161084092903d10610842575b6108388183611966565b810190611b84565b005b503d61082e565b6040513d6000823e3d90fd5b3461060b57602036600319011261060b576001600160a01b036108766118e7565b1660005260086020526020604060002054604051908152f35b3461060b57600036600319011261060b57603c600b90603c6108b3600b5442612122565b1115610a9d576001915b6007548310156108405782600052602090600982526001600160a01b03604060002054169160015b83600052600282526040600020548111610a8f57600182526040600020816000528252600380604060002001546000526006808452866001604060002001548760005260018652604060002085600052865261094a4291600160406000200154611a70565b1161097a575b5050506000198114610964576001016108e5565b634e487b7160e01b600052601160045260246000fd5b610a1181610a16926109fd948a6000526001895260406000208860005289526109cb60046040600020018c60005260018b5260406000208a6000528b52610269610263600560406000200192611ac9565b908b60005260018a526040600020896000528a52876040600020015460005289526064958691604060002054906120d9565b040404610a0b885442612122565b906120d9565b612000565b916046908184029084159285830414831715610964578860005286526040600020856000528652610a4f83604060002092048254611a70565b9055601e80840293840414171561096457610a859086600052600485526040600020846000528552604060002092048254611a70565b9055868086610950565b5050926001915001916108bd565b60405162461bcd60e51b815260206004820152601d60248201527f4c563a204e6f7420656e6f7567682074696d6520746f207570646174650000006044820152606490fd5b3461060b57600036600319011261060b5760206001600160a01b03600c5416604051908152f35b3461060b57608036600319011261060b57610b226118e7565b60243567ffffffffffffffff811161060b57610b429036906004016119a0565b60443567ffffffffffffffff811161060b57610b62903690600401611a10565b90610b7160046064351061208d565b610b7c828285611cc3565b60643560005260066020526002604060002001541015610e7f5760005b8151811015610bc05780610bba6001600160a01b036102b260019486611b70565b01610b99565b5033600052600860205260406000205415610e3b575b336000526002602052604060002080549060018201809211610964575533600052600260205260406000205491610c0e81838661256f565b3360005260056020526040600020846000526020526040600020556064356000526006602052610c4660016040600020015442611a70565b9060405192637e062a3560e11b84526020846004816001600160a01b038a165afa92831561084957600093610df9575b6001600160a01b0380955060405197610c8e89611919565b16875242602088015260408701526064356060870152608086015260a08501521660c083015233600052600160205260406000209060005260205260406000206001600160a01b03825116906001600160a01b031991828254161781556020830151600182015560408301516002820155606083015160038201556004810160808401519081519067ffffffffffffffff821161058757680100000000000000009283831161058757602090610d49848454818655856120ec565b0190600052602060002060005b838110610ddc57505050506005820160a085015180519267ffffffffffffffff841161058757831161058757602090610d94848454818655856120ec565b0190600052602060002060005b838110610dc85786866001600160a01b0360c0600689019301511690825416179055600080f35b600190602084519401938184015501610da1565b60019060206001600160a01b038551169401938184015501610d56565b92506020843d602011610e33575b81610e1460209383611966565b8101031261060b57610e2d6001600160a01b0394611c63565b92610c76565b3d9150610e07565b6007546001810180911161096457806007553360005260086020528060406000205560005260096020526040600020336001600160a01b0319825416179055610bd6565b60405162461bcd60e51b815260206004820152601160248201527f4c563a204d696e20555344207374616b650000000000000000000000000000006044820152606490fd5b3461060b57604036600319011261060b576001600160a01b03610ee56118e7565b16600052600460205260406000206024356000526020526020604060002054604051908152f35b3461060b57600036600319011261060b5760206001600160a01b0360005416604051908152f35b3461060b57604036600319011261060b5767ffffffffffffffff60043581811161060b57610f659036906004016119a0565b9060243590811161060b57602091610269610f84923690600401611a10565b604051908152f35b3461060b57604036600319011261060b576001600160a01b03610fad6118e7565b16600052600560205260406000206024356000526020526020604060002054604051908152f35b3461060b57602036600319011261060b576020610f84600435612000565b3461060b57600036600319011261060b5761100b612161565b60006001600160a01b0381546001600160a01b031981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461060b5760208060031936011261060b576004353360005260019182918282526040600020816000528252600390600360406000200154600052600683526110b761076a85604060002001543360005286865260406000208460005286528660406000200154611a70565b3360005260058352604060002081600052835260406000205433600052600584526040600020826000528452600060408120553360005284845260406000208260005284526111386001600160a01b039182604060002054163360005287875260406000208560005287526111326004604060002001611ac9565b906121dd565b6000955b61114257005b33600052868552604060002083600052855260046040600020015486101561084057600095338752878652604087208488528652856111c78461118b84600460408d2001611b25565b905490891b1c1661119c8486611b70565b5160405163a9059cbb60e01b81523360048201526024810191909152998a9283919082906044820190565b03925af190811561084957889788926111e3575b50019561113c565b6111f990883d8a11610842576108388183611966565b50896111db565b3461060b57606036600319011261060b576112196118e7565b67ffffffffffffffff60243581811161060b5761123a9036906004016119a0565b9160443591821161060b57602092611259610f84933690600401611a10565b91611cc3565b3461060b57600036600319011261060b576020600754604051908152f35b3461060b57604036600319011261060b5760a06112986118e7565b6001600160a01b038091166000526001602052604060002060243560005260205260406000209080825416916001810154916002820154906006600384015493015416926040519485526020850152604084015260608301526080820152f35b3461060b57604036600319011261060b576001600160a01b036113196118e7565b16600052600360205260406000206024356000526020526020604060002054604051908152f35b3461060b57600036600319011261060b5760206001600160a01b03600d5416604051908152f35b3461060b5760208060031936011261060b5760008161081160043533845260038352604084208185528352604084205490338552600384526040852090855283528360408120556001600160a01b03600c54169060405194858094819363a9059cbb60e01b83523360048401602090939291936001600160a01b0360408201951681520152565b3461060b57604036600319011261060b576114076118e7565b60405161141381611919565b60008152600060c0602092828482015282604082015282606082015260606080820152606060a082015201526001600160a01b0380921660005260019160018252604060002060243560005282526040600020906040519161147483611919565b818154168352600181015493808401948552600282015491604085019283526003810154606086019081526114ab60048301611ac9565b90608087019182528560066114c260058601611c12565b9460a08a019586520154169460c0880195865260405198858a52876101008b01995116868b01525160408a0152516060890152516080880152519460e060a0880152855180915282610120880196019060005b8982821061156757505050505193601f198682030160c087015281808651928381520195019160005b828110611554578451861660e089015287870388f35b835187529581019592810192880161153e565b835188168952978501979285019201611515565b3461060b57600036600319011261060b5760206001600160a01b03600a5416604051908152f35b3461060b57604036600319011261060b576020610f846115c06118e7565b60243590611b9c565b3461060b5760208060031936011261060b578060043533600052600180835260406000208260005283526003906003604060002001546000526006845261163361076a82604060002001543360005283875260406000208660005287528360406000200154611a70565b336000526005845260406000208360005284526040600020549133600052600585526040600020846000528552600060408120553360005281855260406000208460005285526116af6001600160a01b039384604060002054163360005284885260406000208760005288526111326004604060002001611ac9565b906000835b61175d575b505050506000929161081191338552600384526040852082865284526116f8604086205433875260048652604087208488528652604087205490611a70565b913386526003855260408620818752855285604081205533865260048552604086209086528452846040812055600c54169060405194858094819363a9059cbb60e01b83523360048401602090939291936001600160a01b0360408201951681520152565b3360005283875260406000208660005287526004604060002001548110156118225760009394959650338452848852604084208785528852876117e6876117aa84600460408a2001611b25565b905490861b1c166117bb8487611b70565b5160405163a9059cbb60e01b8152336004820152602481019190915296879283919082906044820190565b03925af19081156108495785948592611805575b5001879695946116b4565b61181b908a3d8c11610842576108388183611966565b50896117fa565b6116b9565b3461060b57608036600319011261060b57611840612161565b60405161184c816118fd565b6024358152600260208201604435815260408301906064358252600435600052600660205260406000209351845551600184015551910155600080f35b3461060b57602036600319011261060b57600435600052600660205260606040600020805490600260018201549101549060405192835260208301526040820152f35b3461060b57600036600319011261060b57602090600b548152f35b600435906001600160a01b038216820361060b57565b6060810190811067ffffffffffffffff82111761058757604052565b60e0810190811067ffffffffffffffff82111761058757604052565b67ffffffffffffffff811161058757604052565b610160810190811067ffffffffffffffff82111761058757604052565b90601f8019910116810190811067ffffffffffffffff82111761058757604052565b67ffffffffffffffff81116105875760051b60200190565b9080601f8301121561060b5760209082356119ba81611988565b936119c86040519586611966565b81855260208086019260051b82010192831161060b57602001905b8282106119f1575050505090565b81356001600160a01b038116810361060b5781529083019083016119e3565b9080601f8301121561060b576020908235611a2a81611988565b93611a386040519586611966565b81855260208086019260051b82010192831161060b57602001905b828210611a61575050505090565b81358152908301908301611a53565b9190820180921161096457565b15611a8457565b60405162461bcd60e51b815260206004820152601f60248201527f4c563a204e6f7420656e6f7567682074696d6520746f207769746864726177006044820152606490fd5b90604051918281549182825260209260208301916000526020600020936000905b828210611b0257505050611b0092500383611966565b565b85546001600160a01b031684526001958601958895509381019390910190611aea565b8054821015611b3d5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b805115611b3d5760200190565b805160011015611b3d5760400190565b8051821015611b3d5760209160051b010190565b9081602091031261060b5751801515810361060b5790565b600a54604051630bf33c3f60e21b81526001600160a01b039283166004820152602481019390935260209183916044918391165afa90811561084957600091611be3575090565b90506020813d602011611c0a575b81611bfe60209383611966565b8101031261060b575190565b3d9150611bf1565b90604051918281549182825260209260208301916000526020600020936000905b828210611c4957505050611b0092500383611966565b855484526001958601958895509381019390910190611c33565b51906001600160a01b038216820361060b57565b15611c7e57565b60405162461bcd60e51b815260206004820152600c60248201527f496e76616c696420506f6f6c00000000000000000000000000000000000000006044820152606490fd5b9291906001600160a01b03809416604094855195630293577560e41b875260209060049782818a81885afa908115611ff557600091611fc8575b5085518103611f8557600203611e5657611d6790608084600d541685611d2289611b53565b51169086611d2f8a611b60565b5116918c855196879485938493632007bd0f60e11b855284019060209093929360408301946001600160a01b03809216845216910152565b03915afa928315611e4b57600093611d99575b505050611d9695965090611d919291511614611c77565b61203b565b90565b6080833d608011611e43575b81611db260809383611966565b81010312611e3f57815193608085019085821067ffffffffffffffff831117611e2c5750611d96999a509282606092611d9198979695611e1c9552611df683611c63565b8652611e03818401611c63565b90860152611e12818301611c63565b9085015201611c63565b6060820152909192879638611d7a565b634e487b7160e01b815260418c52602490fd5b8380fd5b3d9150611da5565b50513d6000823e3d90fd5b611eb09060a084600d541685611e6b89611b53565b51169086611e788a611b60565b5116918c85519687948593849363923093cb60e01b855284019060209093929360408301946001600160a01b03809216845216910152565b03915afa928315611e4b57600093611ed957505050611d9695965090611d919291511614611c77565b60a0833d60a011611f7d575b81611ef260a09383611966565b81010312611e3f5781519360a085019085821067ffffffffffffffff831117611e2c5750611d96999a509282608092611d9198979695611f6d9552611f3683611c63565b8652611f43818401611c63565b90860152611f52818301611c63565b90850152611f6260608201611c63565b606085015201611c63565b6080820152909192879638611d7a565b3d9150611ee5565b815162461bcd60e51b8152808a01849052601860248201527f496e76616c6964206e756d626572206f6620746f6b656e7300000000000000006044820152606490fd5b90508281813d8311611fee575b611fdf8183611966565b8101031261060b575138611cfd565b503d611fd5565b82513d6000823e3d90fd5b60206001600160a01b03600a54169160246040518094819363210fc36760e11b835260048301525afa90811561084957600091611be3575090565b60009190825b81518410156120865761207e6001916120786001600160a01b036120658887611b70565b51166120718888611b70565b5190611b9c565b90611a70565b930192612041565b9250505090565b1561209457565b60405162461bcd60e51b815260206004820152601060248201527f4c563a20496e76616c69642074696572000000000000000000000000000000006044820152606490fd5b8181029291811591840414171561096457565b90918281106120fa57505050565b600091600052602060002092830192015b82811061211757505050565b81815560010161210b565b9190820391821161096457565b9061213982611988565b6121466040519182611966565b8281528092612157601f1991611988565b0190602036910137565b6001600160a01b0360005416330361217557565b60405163118cdaa760e01b8152336004820152602490fd5b6000915b6003831061219e57505050565b600190825181526020809101920192019190612191565b6000915b600283106121c657505050565b6001908251815260208091019201920191906121b9565b9190916001600160a01b03809116604092835192630293577560e41b8452600060209060049282878581895afa9687156125065782976124d3575b506122228761212f565b9888519661222f88611949565b600a8852610140968736878b01378a519761224989611949565b600a895236878a0137845b8a8110612449575060028a036123da578a51918b830183811067ffffffffffffffff8211176123c5578c528583528587840152803b156123c157906064888780948f6122b7905197889687956316cd8e2760e21b875286015260248501906121b5565b5af180156123b75790849161239f575b50505b825b8881106122e0575050505050505050505090565b602485846122ee8486611b70565b51168c51928380926370a0823160e01b8252308c8301525afa90811561239557888a93928e92889161235b575b5061234e600195612347866123408187819761233a836123549b611b70565b52611b70565b5192611b70565b5190612122565b92611b70565b52016122cc565b94505050508582813d831161238e575b6123758183611966565b8101031261060b5790518891908c90899061234e61231b565b503d61236b565b8b513d87823e3d90fd5b6123a890611935565b6123b35782386122c7565b8280fd5b8a513d86823e3d90fd5b8580fd5b604189634e487b7160e01b6000525260246000fd5b8a51916123e6836118fd565b8583528587840152858c840152803b156123c157906084888780948f6124239051978896879563ecb586a560e01b8752860152602485019061218d565b5af180156123b757612436575b506122ca565b61244290939193611935565b9138612430565b80878d8761245960249589611b70565b51169051938480926370a0823160e01b82528d30908301525afa80156124c9578790612495575b6001925061248e828d611b70565b5201612254565b50908781813d83116124c2575b6124ac8183611966565b810103126124be579060019151612480565b8680fd5b503d6124a2565b8d513d89823e3d90fd5b9096508281813d83116124ff575b6124eb8183611966565b810103126124fb57519538612218565b5080fd5b503d6124e1565b88513d84823e3d90fd5b606460209260006001600160a01b03809460405197889687956323b872dd60e01b87521660048601523060248601526044850152165af18015610849576125545750565b61256c9060203d602011610842576108388183611966565b50565b90916001600160a01b0392838316604092835190637e062a3560e11b825260009260209460049386818681865afa9081156129c657908a91879161298e575b5016988993885199888b6024816370a0823160e01b998a8252308c8301525afa9a8b1561298457889b612951575b508951630293577560e41b81529289848981895afa938415612947578994612914575b50825184036128d15760029384036127d8578a51948b860186811067ffffffffffffffff8211176127c3578c528b36873789808c8e5b8c89851061271b5750505050505050505050813b156127175761267060648692838a519586948593630b4c7e4d60e01b85528a8501906121b5565b8160448401525af1801561270d578593929185916126f2575b50506024905b86519889938492835230908301525afa9283156126e85750916126b8575b50611d969250612122565b905082813d83116126e1575b6126ce8183611966565b8101031261060b57611d969151386126ad565b503d6126c4565b51903d90823e3d90fd5b6126ff9192939450611935565b6123b3579083918338612689565b86513d86823e3d90fd5b8480fd5b8761277b9461272a878c611b70565b518d8860051b01528861273d888a611b70565b51169261274a888d611b70565b5194519687958694859363095ea7b360e01b85528401602090939291936001600160a01b0360408201951681520152565b03925af180156127b957600192918e9161279b575b5050018a8c8e612635565b816127b192903d10610842576108388183611966565b508c38612790565b8e513d8e823e3d90fd5b60418a634e487b7160e01b6000525260246000fd5b8a519493506127e6856118fd565b6060368637885b898b8d8b6003851061286057505050505050505050813b156127175761282b60848692838a519586948593634515cef360e01b85528a85019061218d565b8160648401525af1801561270d57908593929161284c575b5060249061268f565b9361285960249295611935565b9390612843565b8661288f9461286f878b611b70565b518760051b8d015287612882888d611b70565b51169261274a888c611b70565b03925af180156128c75790600192916128aa575b50016127ed565b6128c0908d803d10610842576108388183611966565b50386128a3565b8d513d8d823e3d90fd5b8a5162461bcd60e51b81528089018b9052601960248201527f496e76616c6964206e756d626572206f6620416d6f756e7473000000000000006044820152606490fd5b9093508981813d8311612940575b61292c8183611966565b8101031261293c575192386125ff565b8880fd5b503d612922565b8b513d8b823e3d90fd5b909a508881813d831161297d575b6129698183611966565b81010312612979575199386125dc565b8780fd5b503d61295f565b8a513d8a823e3d90fd5b809250888092503d83116129bf575b6129a78183611966565b810103126123c1576129b98a91611c63565b386125ae565b503d61299d565b88513d88823e3d90fdfea164736f6c6343000818000a",
    "devdoc": {
        "errors": {
            "OwnableInvalidOwner(address)": [
                {
                    "details": "The owner is not a valid owner account. (eg. `address(0)`)"
                }
            ],
            "OwnableUnauthorizedAccount(address)": [
                {
                    "details": "The caller account is not authorized to perform an operation."
                }
            ]
        },
        "kind": "dev",
        "methods": {
            "checkPoolAndGetTotalUSDT(address,address[],uint256[])": {
                "details": "function check uniformity of pool token and list token input and return total USDT value",
                "params": {
                    "amounts": "list of token amount",
                    "pool": "pool address",
                    "tokens": "list of token address"
                }
            },
            "getAssetValue(address,uint256)": {
                "details": "function help get value of Asset , return USD value",
                "params": {
                    "amount": "amount of token",
                    "token": "address of token"
                }
            },
            "owner()": {
                "details": "Returns the address of the current owner."
            },
            "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
            },
            "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            }
        },
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 8,
                "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
            },
            {
                "astId": 1970,
                "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                "label": "userInvestmentList",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserInvestment)1963_storage))"
            },
            {
                "astId": 1974,
                "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                "label": "userCurrentIds",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 1980,
                "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                "label": "avaliableUserRewards",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
            },
            {
                "astId": 1986,
                "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                "label": "lockedUserRewards",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
            },
            {
                "astId": 1992,
                "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                "label": "userLockedTokens",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
            },
            {
                "astId": 1997,
                "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                "label": "tiers",
                "offset": 0,
                "slot": "6",
                "type": "t_mapping(t_uint256,t_struct(Tier)1946_storage)"
            },
            {
                "astId": 1999,
                "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                "label": "numberUser",
                "offset": 0,
                "slot": "7",
                "type": "t_uint256"
            },
            {
                "astId": 2003,
                "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                "label": "userToNum",
                "offset": 0,
                "slot": "8",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 2007,
                "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                "label": "numToUser",
                "offset": 0,
                "slot": "9",
                "type": "t_mapping(t_uint256,t_address)"
            },
            {
                "astId": 2009,
                "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                "label": "priceToken",
                "offset": 0,
                "slot": "10",
                "type": "t_address"
            },
            {
                "astId": 2011,
                "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                "label": "lastTimeUpdate",
                "offset": 0,
                "slot": "11",
                "type": "t_uint256"
            },
            {
                "astId": 2013,
                "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                "label": "thorn",
                "offset": 0,
                "slot": "12",
                "type": "t_address"
            },
            {
                "astId": 2015,
                "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                "label": "poolFactory",
                "offset": 0,
                "slot": "13",
                "type": "t_address"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
                "base": "t_uint256",
                "encoding": "dynamic_array",
                "label": "uint256[]",
                "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserInvestment)1963_storage))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint256 => struct VaultTestnet.UserInvestment))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_struct(UserInvestment)1963_storage)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint256 => uint256))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_uint256)"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_mapping(t_uint256,t_address)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
            },
            "t_mapping(t_uint256,t_struct(Tier)1946_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => struct VaultTestnet.Tier)",
                "numberOfBytes": "32",
                "value": "t_struct(Tier)1946_storage"
            },
            "t_mapping(t_uint256,t_struct(UserInvestment)1963_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => struct VaultTestnet.UserInvestment)",
                "numberOfBytes": "32",
                "value": "t_struct(UserInvestment)1963_storage"
            },
            "t_mapping(t_uint256,t_uint256)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_struct(Tier)1946_storage": {
                "encoding": "inplace",
                "label": "struct VaultTestnet.Tier",
                "members": [
                    {
                        "astId": 1941,
                        "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                        "label": "apr",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 1943,
                        "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                        "label": "locktime",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 1945,
                        "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                        "label": "minUSDStake",
                        "offset": 0,
                        "slot": "2",
                        "type": "t_uint256"
                    }
                ],
                "numberOfBytes": "96"
            },
            "t_struct(UserInvestment)1963_storage": {
                "encoding": "inplace",
                "label": "struct VaultTestnet.UserInvestment",
                "members": [
                    {
                        "astId": 1948,
                        "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                        "label": "pool",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_address"
                    },
                    {
                        "astId": 1950,
                        "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                        "label": "startTime",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 1952,
                        "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                        "label": "endTime",
                        "offset": 0,
                        "slot": "2",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 1954,
                        "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                        "label": "tier",
                        "offset": 0,
                        "slot": "3",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 1957,
                        "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                        "label": "tokens",
                        "offset": 0,
                        "slot": "4",
                        "type": "t_array(t_address)dyn_storage"
                    },
                    {
                        "astId": 1960,
                        "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                        "label": "amounts",
                        "offset": 0,
                        "slot": "5",
                        "type": "t_array(t_uint256)dyn_storage"
                    },
                    {
                        "astId": 1962,
                        "contract": "contracts/vault/VaultTestnet.sol:VaultTestnet",
                        "label": "lp",
                        "offset": 0,
                        "slot": "6",
                        "type": "t_address"
                    }
                ],
                "numberOfBytes": "224"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
